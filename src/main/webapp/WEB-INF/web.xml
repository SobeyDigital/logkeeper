<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
    http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
    <!-- 项目部署名称-->
    <display-name>logkeeper</display-name>
    <jsp-config>
        <taglib>
            <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
            <taglib-location>/WEB-INF/jstl1.1/c.tld</taglib-location>
        </taglib>
    </jsp-config>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:sobeyhive_logkeeper.xml</param-value>
    </context-param>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 可以使用RequestContextHolder.currentRequestAttributes() 获取到请求的attr -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- spring-mvc配置开始 -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--如果要发布rest 要引入这个-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath*:/sobeyhive_commons_restsupport.xml,classpath*:sobeyhive_bean_apidocument.xml
            </param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <!-- 字符编码过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--这个filter有两个作用,第一个作用是增加了etag.客户端可以根据这个etag来判断资源是否更新.第二个作用是 让我们拥有了修改response的header的能力,默认情况下是不能修改response的header的-->
    <filter>
        <filter-name>etagFilter</filter-name>
        <filter-class>org.springframework.web.filter.ShallowEtagHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>etagFilter</filter-name>
        <servlet-name>springmvc</servlet-name>
    </filter-mapping>

    <!-- 跨域执行的过滤器,必须增加这个 JS才能跨域访问我们 -->
    <filter>
        <filter-name>responseFilter</filter-name>
        <filter-class>com.sobey.jcg.sobeyhive.commons.restful.ResponseHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>responseFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 覆盖default servlet的/, springmvc servlet将处理原来处理静态资源的映射 -->
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    <!--由于有模块化的需求,因此.这里使用了 Servlet3.0.1  他支持注解的获取web.xml配置.
    也就是说,不用在这里面配置东西了. 在各个servlet/listener/filter的类上 增加上注解即可.
    他就会自动的扫描并加载这些东西.
    这样的好处就在于更灵活了. 比如我不要发布WS,那么直接把WS的jar包给去掉就OK了.-->

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>